// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

// Model UserMysql yang dimodifikasi
model UserMysql {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  name                   String?
  password               String
  hashedRefreshToken     String?  @db.Text
  passwordResetToken     String?  @unique
  passwordResetExpires   DateTime?
  isEmailVerified        Boolean  @default(false)
  emailVerificationToken String?  @unique

  // Tambahkan relasi ke Role (wajib)
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  // Tambahkan relasi ke Company (opsional, untuk user admin panel)
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
}

// --- Model Baru --- //

model Company {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  // Tambahkan field lain jika perlu (alamat, dll)
  users UserMysql[] // Relasi ke UserMysql (untuk admin panel)
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique // Misal: 'CUSTOMER', 'COMPANY_ADMIN', 'MARKETING_STAFF'
  description String?
  users       UserMysql[]  // Relasi ke UserMysql
  permissions Permission[] @relation("RolePermissions") // Relasi many-to-many ke Permission
}

model Permission {
  id          Int      @id @default(autoincrement())
  code        String   @unique // Misal: 'VIEW_CUSTOMER_LIST', 'CREATE_CUSTOMER'
  description String?
  roles       Role[]   @relation("RolePermissions") // Relasi many-to-many ke Role
}

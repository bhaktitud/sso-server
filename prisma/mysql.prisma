// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

// Enum untuk membedakan tipe pengguna
enum UserType {
  APP_USER
  ADMIN_USER
}

// Model dasar untuk semua pengguna (menggantikan UserMysql)
model User {
  id           Int           @id @default(autoincrement()) // Menggunakan Int ID untuk MySQL
  email        String        @unique
  password     String
  userType     UserType
  // Field dari UserMysql yang mungkin masih relevan:
  name         String?
  hashedRefreshToken String?  @db.Text
  passwordResetToken   String?  @unique
  passwordResetExpires DateTime?
  isEmailVerified        Boolean   @default(false)
  emailVerificationToken String?   @unique
  // Akhir field dari UserMysql
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  adminProfile AdminProfile? // Relasi one-to-one opsional ke AdminProfile
}

// Model untuk detail spesifik pengguna admin panel
model AdminProfile {
  id        Int       @id @default(autoincrement()) // Menggunakan Int ID
  userId    Int       @unique // Kunci asing ke User (Int)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  companyId Int?      // Kunci asing ke Company (Int) - Opsional
  company   Company?  @relation(fields: [companyId], references: [id])
  roles     Role[]    @relation("AdminRoles") // Relasi Many-to-Many ke Role
  features  Feature[] @relation("AdminFeatures") // Relasi Many-to-Many ke Feature
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Model untuk Perusahaan
model Company {
  id          Int            @id @default(autoincrement()) // Menggunakan Int ID
  name        String
  description String?
  clientId    String?        @unique // Client ID unik untuk OAuth
  clientSecret String?       // Client Secret untuk OAuth
  admins      AdminProfile[] // Relasi One-to-Many ke AdminProfile
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  apiKeys     ApiKey[]       // Relasi One-to-Many ke ApiKey
}

// Model untuk API Key
model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  name        String   // Nama untuk identifikasi API key (contoh: "Production", "Development", dll)
  description String?
  isActive    Boolean  @default(true)
  companyId   Int      // Kunci asing ke Company
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  apiLogs     ApiLog[] // Relasi One-to-Many ke ApiLog
}

// Model untuk API Log (mencatat penggunaan API)
model ApiLog {
  id           Int      @id @default(autoincrement())
  apiKeyId     Int
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  companyId    Int?     // Untuk memudahkan query berdasarkan perusahaan
  endpoint     String   // Endpoint yang diakses
  method       String   // HTTP method (GET, POST, PUT, DELETE, dll)
  statusCode   Int      // HTTP status code
  requestBody  String?  @db.Text // Request body (opsional, untuk debugging)
  responseBody String?  @db.Text // Response body (opsional, untuk debugging)
  responseTime Int?     // Waktu respons dalam milidetik
  ipAddress    String?  // IP address dari client
  userAgent    String?  @db.Text // User agent dari client
  createdAt    DateTime @default(now())
}

// Model untuk Peran (Role) - Menggantikan enum Role sebelumnya
model Role {
  id          Int            @id @default(autoincrement()) // Menggunakan Int ID
  name        String         @unique // Nama peran harus unik (mis. 'Manager', 'OrderViewer')
  description String?
  admins      AdminProfile[] @relation("AdminRoles") // Relasi Many-to-Many ke AdminProfile
  permissions Permission[]   @relation("RolePermissions") // Relasi Many-to-Many ke Permission
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Model untuk Izin (Permission)
model Permission {
  id        Int      @id @default(autoincrement()) // Menggunakan Int ID
  action    String // e.g., 'create', 'read', 'update', 'delete', 'manage'
  subject   String // e.g., 'Order', 'User', 'Product', 'Company'
  roles     Role[]   @relation("RolePermissions") // Relasi Many-to-Many ke Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, subject]) // Kombinasi action & subject harus unik
}

// Model untuk Fitur
model Feature {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  code        String         @unique // Kode unik untuk identifikasi fitur
  description String?
  isActive    Boolean        @default(true)
  admins      AdminProfile[] @relation("AdminFeatures") // Relasi Many-to-Many ke AdminProfile
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
